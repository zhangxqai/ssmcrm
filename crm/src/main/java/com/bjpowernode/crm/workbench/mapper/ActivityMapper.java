package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 27 14:21:28 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 27 14:21:28 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 27 14:21:28 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 27 14:21:28 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 27 14:21:28 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Aug 27 14:21:28 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    int insertActivity(Activity activity);

    /**
     * 点击市场活动查询所有符合条件的市场活动列表
     * @param map
     * @return
     */
    List<Activity> selectActivityAll(Map<String,Object> map);

    /**
     * 根据条件查询符合市场活动的总条数
     * @param map
     * @return
     */
    int selectActivityAllCount(Map<String,Object> map);

    /**
     * 根据id删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityById(String[] ids);

    /**
     * 根据id查询市场活动列表，
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据Id对市场活动进行修改，只能修改一条
     * @param activity
     * @return
     */
    int updateActivityById(Activity activity);

    /**
     * 批量导出市场活动
     * @return
     */
    List<Activity> selectAllActivityDow();

    /**
     * 批量保存创建的市场活动
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 为了在线索详细信息页面上的市场活动列表上体现，根据id去查
     * @param id
     * @return
     */
    List<Activity> selectActivityForClueById(String id);

    /**
     * 为了线索关联市场活动查询全部信息
     * @param name
     * @return
     */
    List<Activity> selectForClueRelationActivityByName(Map<String,Object> map);

    int selectForClueRelationActivityCount(Map<String,Object> map);
}